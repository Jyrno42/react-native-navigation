// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DeckTransition",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIViewController;

/// A segue to implement the Deck transition via Storyboards
/// To use this, set your segue’s class to <code>DeckSegue</code>, and its <code>kind</code> to
/// <code>custom</code>
SWIFT_CLASS("_TtC14DeckTransition9DeckSegue")
@interface DeckSegue : UIStoryboardSegue
/// Performs the visual transition for the Deck segue.
- (void)perform;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nullable)identifier source:(UIViewController * _Nonnull)source destination:(UIViewController * _Nonnull)destination OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

/// A set of methods that vend objects used to customize a DeckTransition
/// presentation’s swipe-to-dismiss behaviour.
/// The transition has an internal heuristic to determine which <code>UIScrollView</code>
/// should be tracked for the swipe-to-dismiss gesture. However that has some
/// edge cases, which can we worked around by making your modal view controller
/// and view controllers presented by or contained within it conform to this
/// protocol.
SWIFT_PROTOCOL("_TtP14DeckTransition36DeckTransitionViewControllerProtocol_")
@protocol DeckTransitionViewControllerProtocol
@optional
/// The child view controller which contains the scroll view that should
/// be tracked for the swipe-to-dismiss gesture.
/// The default heuristic for searching the <code>UIScrollView</code> to track
/// traverses only the first level of subviews of the presented view
/// controller. As a result of this, subviews of any child view controller
/// are not inspected.
/// A container view controller presented using DeckTransition can
/// implement this variable and return the child view controller which
/// contains the scroll view to be tracked.
/// If this variable is not implemented or is <code>nil</code>, then the container view
/// controller’s own view is searched.
/// If this variable is implemented and is not <code>nil</code>, the container view
/// controller’s own subviews and the value returned in the
/// <code>scrollViewForDeck</code> variable are both ignored, and the search continues
/// within the child view controller returned here.
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForDeck;
/// The scroll view that should be tracked for Deck’s swipe-to-dismiss
/// gesture.
/// The default heuristic for searching the <code>UIScrollView</code> to track only
/// traverses only the first level of subviews of the presented view
/// controller, returning the lowermost scroll view found.
/// This is a similar heuristic to that used in <code>UINavigationController</code>
/// (which to the best of my knowledge, is even more limited and checks only
/// one view, the lowermost subview of the main view), however it can miss
/// out on the intended scroll view for more complex view hierarchies.
/// For those cases, you can implement this variable and return the
/// <code>UIScrollView</code> instance which should be tracked.
/// note:
/// The value returned in this variable is ignored if the
/// <code>childViewControllerForDeck</code> variable is also implemented.
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollViewForDeck;
@end

@class NSNumber;
@protocol UIViewControllerAnimatedTransitioning;
@class UIPresentationController;

/// The DeckTransitioningDelegate class vends out the presentation and animation
/// controllers required to present a view controller with the Deck transition
/// style
/// The following snippet described the steps for presenting a given
/// <code>ModalViewController</code> with the <code>DeckTransitioningDelegate</code>
/// \code
/// let modal = ModalViewController()
/// let transitionDelegate = DeckTransitioningDelegate()
/// modal.transitioningDelegate = transitionDelegate
/// modal.modalPresentationStyle = .custom
/// present(modal, animated: true, completion: nil)
///
/// \endcode
SWIFT_CLASS("_TtC14DeckTransition25DeckTransitioningDelegate")
@interface DeckTransitioningDelegate : NSObject <UIViewControllerTransitioningDelegate>
/// Returns a transitioning delegate to perform a Deck transition. All
/// parameters are optional. Swipe-to-dimiss is enabled by default. Leaving
/// the duration parameters empty gives you animations with the default
/// durations (0.3s for both)
/// \param isSwipeToDismissEnabled Whether the modal view controller should
/// be dismissed with a swipe gesture from top to bottom
///
/// \param presentDuration The duration for the presentation animation
///
/// \param presentAnimation An animation block that will be performed
/// alongside the card presentation animation
///
/// \param presentCompletion A block that will be run after the card has been
/// presented
///
/// \param dismissDuration The duration for the dismissal animation
///
/// \param dismissAnimation An animation block that will be performed
/// alongside the card dismissal animation
///
/// \param dismissCompletion A block that will be run after the card has been
/// dismissed
///
- (nonnull instancetype)initWithIsSwipeToDismissEnabled:(BOOL)isSwipeToDismissEnabled presentDuration:(NSNumber * _Nullable)presentDuration presentAnimation:(void (^ _Nullable)(void))presentAnimation presentCompletion:(void (^ _Nullable)(BOOL))presentCompletion dismissDuration:(NSNumber * _Nullable)dismissDuration dismissAnimation:(void (^ _Nullable)(void))dismissAnimation dismissCompletion:(void (^ _Nullable)(BOOL))dismissCompletion OBJC_DESIGNATED_INITIALIZER;
/// Returns an animation controller that animates the modal presentation
/// This is internal infrastructure handled entirely by UIKit and shouldn’t
/// be called directly
/// \param presented The modal view controller to be presented onscreen
///
/// \param presenting The view controller that will be presenting the modal
///
/// \param source The view controller whose <code>present</code> method is called
///
///
/// returns:
/// An animation controller that animates the modal presentation
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
/// Returns an animation controller that animates the modal dismissal
/// This is internal infrastructure handled entirely by UIKit and shouldn’t
/// be called directly
/// \param dismissed The modal view controller which will be dismissed
///
///
/// returns:
/// An animation controller that animates the modal dismisall
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
/// Returns a presentation controller that manages the modal presentation
/// This is internal infrastructure handled entirely by UIKit and shouldn’t
/// be called directly
/// \param presented The modal view controller
///
/// \param presenting The view controller which presented the modal
///
/// \param source The view controller whose <code>present</code> method was called to
/// present the modal
///
///
/// returns:
/// A presentation controller that manages the modal presentation
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface UINavigationController (SWIFT_EXTENSION(DeckTransition)) <DeckTransitionViewControllerProtocol>
/// The view controller at the top of the navigation stack is assumed to
/// contain the <code>UIScrollView</code> to be tracked
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForDeck;
@end


@interface UITabBarController (SWIFT_EXTENSION(DeckTransition)) <DeckTransitionViewControllerProtocol>
/// The view controller representing the selected tab is assumed to contain
/// the <code>UIScrollView</code> to be tracked
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForDeck;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
